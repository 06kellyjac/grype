package vulnerability

import (
	"fmt"
	"testing"

	"github.com/anchore/imgbom/imgbom/distro"
	"github.com/anchore/imgbom/imgbom/pkg"
	"github.com/anchore/vulnscan/vulnscan/version"
)

func TestGetByDistro(t *testing.T) {
	provider := NewProviderFromStore(newMockStore())

	d, err := distro.NewDistro(distro.Debian, "8")
	if err != nil {
		t.Fatalf("failed to create distro: %+v", err)
	}

	p := pkg.Package{
		Name: "neutron",
	}

	actual, err := provider.GetByDistro(d, &p)
	if err != nil {
		t.Fatalf("failed to get by distro: %+v", err)
	}

	if len(actual) != 2 {
		t.Fatalf("unexpected distro length: %d", len(actual))
	}

	expected := []Vulnerability{
		{
			Constraint: version.MustGetConstraint("< 2014.1.3-6", version.DpkgFormat),
			ID:         "CVE-2014-fake-1",
		},
		{
			Constraint: version.MustGetConstraint("< 2013.0.2-1", version.DpkgFormat),
			ID:         "CVE-2013-fake-2",
		},
	}

	for idx, vuln := range actual {
		if vuln.ID != expected[idx].ID {
			t.Errorf("mismatched vuln ID: %s!=%s", vuln.ID, actual[idx].ID)
		}
		if vuln.Constraint.String() != expected[idx].Constraint.String() {
			t.Errorf("mismatched vuln constraint: '%s'!='%s'", vuln.Constraint.String(), actual[idx].Constraint.String())
		}
	}

}

// TODO: delete me once implemented in vulnscan-db
func TestForceSemVerConstraint(t *testing.T) {
	tests := []struct {
		input    string
		expected string
	}{
		{
			input:    "> 5.0.0",
			expected: "> 5.0.0",
		},
		{
			input:    ">= 5.0.0",
			expected: ">= 5.0.0",
		},
		{
			input:    ">= 5.0.0 < 6.1",
			expected: ">= 5.0.0 , < 6.1",
		},
		{
			input:    ">= 5.0.0 < 6.1.2",
			expected: ">= 5.0.0 , < 6.1.2",
		},
		{
			input:    ">= 5 <= 6",
			expected: ">= 5 , <= 6",
		},
		{
			input:    ">=5<6",
			expected: ">=5, <6",
		},
	}

	for _, test := range tests {
		name := fmt.Sprintf("'%s'->'%s'", test.input, test.expected)
		t.Run(name, func(t *testing.T) {
			actual := forceSemVerConstraint(test.input)
			if actual != test.expected {
				t.Errorf("failed to force semver constraint: input='%s': '%s'!='%s'", test.input, test.expected, actual)
			}
		})
	}
}
