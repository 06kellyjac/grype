package models

import "github.com/anchore/grype/grype/vulnerability"

type VulnerabilityMetadata struct {
	ID          string   `json:"id"`
	DataSource  string   `json:"dataSource"`
	Namespace   string   `json:"namespace,omitempty"`
	Severity    string   `json:"severity,omitempty"`
	URLs        []string `json:"urls,omitempty"`
	Description string   `json:"description,omitempty"`
	Cvss        []Cvss   `json:"cvss,omitempty"`
}

type Cvss struct {
	Version        string      `json:"version"`
	Vector         string      `json:"vector"`
	Metrics        CvssMetrics `json:"metrics"`
	VendorMetadata interface{} `json:"vendorMetadata"`
}

type CvssMetrics struct {
	BaseScore           float64  `json:"baseScore"`
	ExploitabilityScore *float64 `json:"exploitabilityScore,omitempty"`
	ImpactScore         *float64 `json:"impactScore,omitempty"`
}

func NewVulnerabilityMetadata(id, namespace string, metadata *vulnerability.Metadata) VulnerabilityMetadata {
	if metadata == nil {
		return VulnerabilityMetadata{
			ID:        id,
			Namespace: namespace,
		}
	}

	cvss := make([]Cvss, 0)
	for _, score := range metadata.Cvss {
		vendorMetadata := score.VendorMetadata
		if vendorMetadata == nil {
			vendorMetadata = make(map[string]interface{})
		}
		cvss = append(cvss, Cvss{
			Version: score.Version,
			Vector:  score.Vector,
			Metrics: CvssMetrics{
				BaseScore:           score.Metrics.BaseScore,
				ExploitabilityScore: score.Metrics.ExploitabilityScore,
				ImpactScore:         score.Metrics.ImpactScore,
			},
			VendorMetadata: vendorMetadata,
		})
	}

	return VulnerabilityMetadata{
		ID:          id,
		DataSource:  metadata.DataSource,
		Namespace:   metadata.Namespace,
		Severity:    metadata.Severity,
		URLs:        metadata.URLs,
		Description: metadata.Description,
		Cvss:        cvss,
	}
}
